/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Tue May 09 07:34:13 GMT 2023
 */

package org.apache.commons.mail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URL;
import java.util.Properties;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.activation.URLDataSource;
import javax.mail.BodyPart;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailAttachment;
import org.apache.commons.mail.MultiPartEmail;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiPartEmail_ESTest extends MultiPartEmail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.init();
      assertFalse(multiPartEmail0.isStartTLSRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      FileDataSource fileDataSource0 = new FileDataSource("org.apache.commons.mail.DefaultAuthenticator");
      try { 
        multiPartEmail0.attach((DataSource) fileDataSource0, "org.apache.commons.mail.DefaultAuthenticator", "org.apache.commons.mail.DefaultAuthenticator");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid Datasource
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "=h?|9LOt[$$5}e+Nc");
      try { 
        multiPartEmail0.attach(uRL0, "05rN%D9+i(rGQa,", "05rN%D9+i(rGQa,", "05rN%D9+i(rGQa,");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // javax.mail.internet.ParseException: Unbalanced comments
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSSLOnConnect(true);
      Email email0 = multiPartEmail0.setMsg("idX9S)Rp2qLnd");
      assertEquals(60000, email0.getSocketConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.socketTimeout = 0;
      Email email0 = multiPartEmail0.setMsg("Je ");
      assertFalse(email0.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSocketTimeout((-3443));
      Email email0 = multiPartEmail0.setMsg("1>Kq\"65");
      assertEquals(60000, email0.getSocketConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.socketConnectionTimeout = (-1504);
      Email email0 = multiPartEmail0.setMsg("mai&l.smtp.port");
      assertEquals((-1504), email0.getSocketConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.getContainer();
      boolean boolean0 = multiPartEmail0.isInitialized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSubType("Po`(.j");
      String string0 = multiPartEmail0.getSubType();
      assertEquals("Po`(.j", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setInitialized(true);
      MimeMultipart mimeMultipart0 = multiPartEmail0.getContainer();
      assertNull(mimeMultipart0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      BodyPart bodyPart0 = multiPartEmail0.createBodyPart();
      assertNotNull(bodyPart0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setStartTLSEnabled(true);
      EmailAttachment emailAttachment0 = new EmailAttachment();
      multiPartEmail0.attach(emailAttachment0);
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.socketConnectionTimeout = (-1);
      EmailAttachment emailAttachment0 = new EmailAttachment();
      multiPartEmail0.attach(emailAttachment0);
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.attach((DataSource) uRLDataSource0, "attachment", "inline", "inline");
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.socketConnectionTimeout = (-55);
      FileDataSource fileDataSource0 = new FileDataSource(",!v0 HUUuZ)3cf+eyFO");
      multiPartEmail0.attach((DataSource) fileDataSource0, "`", "", (String) null);
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      MimeMultipart mimeMultipart0 = multiPartEmail0.getContainer();
      Email email0 = multiPartEmail0.addPart(mimeMultipart0, 0);
      assertFalse(email0.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      MimeMultipart mimeMultipart0 = new MimeMultipart();
      multiPartEmail0.setSocketConnectionTimeout((-299));
      Email email0 = multiPartEmail0.addPart(mimeMultipart0, 0);
      assertFalse(email0.isStartTLSRequired());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setStartTLSRequired(true);
      MimeMultipart mimeMultipart0 = multiPartEmail0.getContainer();
      Email email0 = multiPartEmail0.addPart(mimeMultipart0);
      assertNull(email0.getSubject());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSocketTimeout((-1));
      MimeMultipart mimeMultipart0 = new MimeMultipart();
      Email email0 = multiPartEmail0.addPart(mimeMultipart0);
      assertNull(email0.getBounceAddress());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.socketConnectionTimeout = 0;
      MimeMultipart mimeMultipart0 = multiPartEmail0.getContainer();
      Email email0 = multiPartEmail0.addPart(mimeMultipart0);
      assertNull(email0.getBounceAddress());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setStartTLSRequired(true);
      Email email0 = multiPartEmail0.addPart("iso-8859-1", "iso-8859-1");
      assertNull(email0.getBounceAddress());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSendPartial(true);
      Email email0 = multiPartEmail0.addPart("xBdq74]K?OtaG", "(Ll)l");
      assertFalse(email0.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSSLOnConnect(true);
      multiPartEmail0.addPart("Already initialized", "Already initialized");
      MimeMultipart mimeMultipart0 = multiPartEmail0.emailBody;
      Email email0 = multiPartEmail0.addPart(mimeMultipart0);
      assertSame(multiPartEmail0, email0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSocketTimeout(0);
      Email email0 = multiPartEmail0.addPart("org.apache.commons.mail.MultiPartEmail", "Invalid Datasource");
      assertFalse(email0.isTLS());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.socketTimeout = (-1724);
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.addPart("EXRrg", "EXRrg");
      assertFalse(multiPartEmail1.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.socketConnectionTimeout = 0;
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.addPart("org.apache.commons.mail.MultiPartEmail", "Invalid Datasource");
      assertFalse(multiPartEmail1.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.socketConnectionTimeout = (-1504);
      Email email0 = multiPartEmail0.addPart("*m/Ba_/D9VbW<", "0k>U|=~s]-Vu");
      assertFalse(email0.isSSLOnConnect());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      Email email0 = multiPartEmail0.setMsg(",[0ALZ'nK5@,ELq");
      Properties properties0 = new Properties();
      Session session0 = Session.getDefaultInstance(properties0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      email0.message = mimeMessage0;
      // Undeclared exception!
      try { 
        multiPartEmail0.buildMimeMessage();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The MimeMessage is already built.
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        multiPartEmail0.attach(uRL0, "", "", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid URL set:http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((URL) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      // Undeclared exception!
      try { 
        multiPartEmail0.addPart((MimeMultipart) null, (-377));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.mail.internet.MimeBodyPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      Email email0 = multiPartEmail0.setMsg("Jspwd~C`f,]VN");
      Email email1 = multiPartEmail0.setMsg("mail.smtp.timeout");
      assertSame(email1, email0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((DataSource) null, "", "", "Invalid attachment supplied");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      FileDataSource fileDataSource0 = new FileDataSource("~vOR<c_>");
      try { 
        multiPartEmail0.attach((DataSource) fileDataSource0, "~vOR<c_>", "~vOR<c_>", "~vOR<c_>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // javax.mail.internet.ParseException: Expected ';', got \"<\"
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((URL) null, "n:", "n:", "n:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setBoolHasAttachments(false);
      assertFalse(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      MimeMultipart mimeMultipart0 = multiPartEmail0.createMimeMultipart();
      // Undeclared exception!
      try { 
        multiPartEmail0.addPart(mimeMultipart0, 2489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2489 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      try { 
        multiPartEmail0.attach((DataSource) null, "|s9J`hI$LC72UY'O", "|s9J`hI$LC72UY'O");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid Datasource
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      URL uRL0 = MockURL.getFtpExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((DataSource) uRLDataSource0, "@hAJlgrJO- #", "@hAJlgrJO- #");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      emailAttachment0.setPath("-QyL~#7!?x$");
      try { 
        multiPartEmail0.attach(emailAttachment0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot attach file \"-QyL~#7!?x$\"
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      URL uRL0 = MockURL.getFtpExample();
      emailAttachment0.setURL(uRL0);
      // Undeclared exception!
      try { 
        multiPartEmail0.attach(emailAttachment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      try { 
        multiPartEmail0.attach((EmailAttachment) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid attachment supplied
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      MockFile mockFile0 = new MockFile("427HWz/Cu>qYaqU:");
      try { 
        multiPartEmail0.attach((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot attach file \"C:\\Users\\rocco\\commons-email\\427HWz\\Cu>qYaqU:\"
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      File file0 = MockFile.createTempFile("uzet(#mIdIX=%TFk", "uzet(#mIdIX=%TFk");
      multiPartEmail0.attach(file0);
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.getPrimaryBodyPart();
      try { 
        multiPartEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      try { 
        multiPartEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.charset = "Tp?";
      Email email0 = multiPartEmail0.setMsg("Already initialized");
      assertFalse(email0.isSSLOnConnect());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      try { 
        multiPartEmail0.setMsg("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid message supplied
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.getContainer();
      // Undeclared exception!
      try { 
        multiPartEmail0.init();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already initialized
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        multiPartEmail0.attach(uRL0, "<(e^B2gklbcaKryGA", "<(e^B2gklbcaKryGA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid URL set:http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach(emailAttachment0);
      boolean boolean0 = multiPartEmail1.isBoolHasAttachments();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      boolean boolean0 = multiPartEmail0.isBoolHasAttachments();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      MimeMultipart mimeMultipart0 = multiPartEmail0.emailBody;
      // Undeclared exception!
      try { 
        multiPartEmail0.addPart(mimeMultipart0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.mail.internet.MimeBodyPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      String string0 = multiPartEmail0.getSubType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      boolean boolean0 = multiPartEmail0.isInitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSubType("From address required");
      try { 
        multiPartEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }
}
