/*
 * This file was automatically generated by EvoSuite
 * Tue May 09 16:23:11 GMT 2023
 */

package org.apache.commons.mail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URL;
import java.util.Properties;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.activation.URLDataSource;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailAttachment;
import org.apache.commons.mail.HtmlEmail;
import org.apache.commons.mail.MultiPartEmail;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlEmail_ESTest extends HtmlEmail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDataSource fileDataSource0 = new FileDataSource("receiver.name");
      Random.setNextRandom((-1089614106));
      HtmlEmail htmlEmail0 = new HtmlEmail();
      String string0 = htmlEmail0.embed((DataSource) fileDataSource0, "HRRQjn??vMaCw:J");
      assertNotNull(string0);
      assertEquals("cccccccccc", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("_s2 *P#", "CC }.6");
      try { 
        htmlEmail0.embed((File) mockFile0, "CC }.6");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // couldn't get canonical path for CC }.6
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSEnabled(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("text/html");
      assertFalse(htmlEmail1.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      Email email0 = htmlEmail0.setSendPartial(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("text/html");
      assertSame(htmlEmail1, email0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSSLCheckServerIdentity(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("mail.smtp.sendpartial");
      assertFalse(htmlEmail1.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSSLOnConnect(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("mxbu(F ");
      assertTrue(htmlEmail1.isSSLOnConnect());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      htmlEmail0.attach(emailAttachment0);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("W;?O)Q^w>>K{l}|K");
      assertFalse(htmlEmail1.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.socketTimeout = 0;
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("Wz#sX9!`aa%3H v");
      assertEquals(10, HtmlEmail.CID_LENGTH);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketTimeout((-1317));
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg(" doesn't exist");
      assertFalse(htmlEmail1.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketConnectionTimeout(0);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg(":");
      assertNull(htmlEmail1.getSubject());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketConnectionTimeout((-589));
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("M");
      assertFalse(htmlEmail1.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSRequired(true);
      HtmlEmail htmlEmail1 = (HtmlEmail)htmlEmail0.setMsg("<FF@jd4x");
      assertNull(htmlEmail1.getSubType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      Email email0 = htmlEmail0.setStartTLSEnabled(true);
      Email email1 = htmlEmail0.setMsg("\" does not exist");
      assertSame(email1, email0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSendPartial(true);
      Email email0 = htmlEmail0.setMsg("f lK(`Dwt]7");
      assertSame(htmlEmail0, email0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSSLCheckServerIdentity(true);
      Email email0 = htmlEmail0.setMsg("\" does not exist");
      assertFalse(email0.isSSL());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      Email email0 = htmlEmail0.setSSLOnConnect(true);
      Email email1 = htmlEmail0.setMsg("value can not be null or empty");
      assertSame(email1, email0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.socketTimeout = 0;
      HtmlEmail htmlEmail1 = (HtmlEmail)htmlEmail0.setMsg("\" does not exist");
      assertEquals(10, HtmlEmail.CID_LENGTH);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketTimeout((-1160));
      Email email0 = htmlEmail0.setMsg("o dzes no)t exist");
      assertFalse(email0.isSSLOnConnect());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketConnectionTimeout(0);
      Email email0 = htmlEmail0.setMsg("%22des%20not%20Yxist");
      assertFalse(email0.isSSLOnConnect());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.socketConnectionTimeout = (-2);
      Email email0 = htmlEmail0.setMsg("\" does not exist");
      assertFalse(email0.isSSL());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSEnabled(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("25");
      assertNull(htmlEmail1.getSubType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSendPartial(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("text/html");
      assertNull(htmlEmail1.getSubject());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSSLCheckServerIdentity(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("!-L6x");
      assertEquals(60000, htmlEmail1.getSocketConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSSLOnConnect(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg(" JV9\"|+:C[5Cg");
      assertEquals(60000, htmlEmail1.getSocketTimeout());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      MultiPartEmail multiPartEmail0 = htmlEmail0.attach(emailAttachment0);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("inline");
      assertSame(htmlEmail1, multiPartEmail0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.socketTimeout = 0;
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("Wz#sX9!`aa%3H v");
      assertSame(htmlEmail0, htmlEmail1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketTimeout((-1317));
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("Ir<'<#.1%N>^\u0001");
      assertFalse(htmlEmail1.isSSLOnConnect());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketConnectionTimeout((-485));
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("\" does not exist");
      assertNull(htmlEmail1.getBounceAddress());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getFtpExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      htmlEmail0.embed((DataSource) uRLDataSource0, "WhUsQy>W5", (String) null);
      String string0 = htmlEmail0.embed(uRL0, "WhUsQy>W5");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getHttpExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      String string0 = htmlEmail0.embed((DataSource) uRLDataSource0, "WhJU,iQyV.W5", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = htmlEmail0.embed(uRL0, "WhJU,iQyV.W5");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("org.apache.commons.mail.MultiPartEmail", "fEun");
      String string0 = htmlEmail0.embed(file0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("oG.-98G<3G8e^$QK", "", (File) null);
      String string0 = htmlEmail0.embed(file0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Random.setNextRandom(45);
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("org.apache.commons.mail.EmailAttachment", "org.apache.commons.mail.EmailAttachment");
      String string0 = htmlEmail0.embed(file0);
      assertEquals("mmmmmmmmmm", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.embed((DataSource) null, "text/html", "text/html");
      // Undeclared exception!
      try { 
        htmlEmail0.embed((DataSource) null, "text/html");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.embed((DataSource) null, "\" does not exist", "US-ASCII");
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        htmlEmail0.embed(uRL0, "\" does not exist");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      try { 
        htmlEmail0.embed((URL) null, "attachment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileDataSource fileDataSource0 = new FileDataSource("http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html");
      htmlEmail0.embed((DataSource) fileDataSource0, "http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html", "http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html");
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        htmlEmail0.embed(uRL0, "http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.activation.FileDataSource cannot be cast to javax.activation.URLDataSource
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.embed("org.apache.commons.mail.EmailException", "org.apache.commons.mail.EmailException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid URL
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.inlineEmbeds = null;
      // Undeclared exception!
      try { 
        htmlEmail0.embed("http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html", "http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      try { 
        htmlEmail0.embed((File) null, "mail.smtp.starttls.required");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getHttpExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      htmlEmail0.embed((DataSource) uRLDataSource0, "<html><body><pre>", "<html><body><pre>");
      MockFile mockFile0 = new MockFile("<html><body><pre>", "<html><body><pre>");
      // Undeclared exception!
      try { 
        htmlEmail0.embed((File) mockFile0, "text/:t");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.activation.URLDataSource cannot be cast to javax.activation.FileDataSource
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Random.setNextRandom((-66));
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("Lu@-a.P2", "");
      try { 
        htmlEmail0.embed((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file C:\\Users\\sdell\\commons-email\\Lu@-a.P2 doesn't exist
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Random.setNextRandom((-3055));
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      try { 
        htmlEmail0.embed((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setInitialized(true);
      // Undeclared exception!
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      Properties properties0 = new Properties();
      Session session0 = Session.getDefaultInstance(properties0);
      MimeMessage mimeMessage0 = htmlEmail0.createMimeMessage(session0);
      htmlEmail0.message = mimeMessage0;
      // Undeclared exception!
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The MimeMessage is already built.
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      htmlEmail0.embed((DataSource) null, "' is already bound to file ");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "embedded DataSource '");
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = MockURL.URL(uRL0, "http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html");
      // Undeclared exception!
      htmlEmail0.embed(uRL1, "embedded DataSource '");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        htmlEmail0.embed(uRL0, "attachment");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid URL
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      Email email0 = htmlEmail0.setMsg("T5");
      email0.charset = "T5";
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      htmlEmail0.attach(emailAttachment0);
      htmlEmail0.setMsg("alternative");
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setTextMsg("' is already bound to file ");
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("\"des not Yxist", "\"des not Yxist");
      htmlEmail0.embed(file0, "\"des not Yxist");
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("%22des%20not%20Yxist");
      try { 
        htmlEmail1.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getFileExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      try { 
        htmlEmail0.embed((DataSource) uRLDataSource0, "", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // name cannot be null or empty
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getFileExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      htmlEmail0.embed((DataSource) uRLDataSource0, "text/html", "|N");
      MockFile mockFile0 = new MockFile((File) null, "tetplain");
      FileDataSource fileDataSource0 = new FileDataSource(mockFile0);
      try { 
        htmlEmail0.embed((DataSource) fileDataSource0, "text/html");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // embedded DataSource 'text/html' is already bound to name javax.activation.URLDataSource@0000000003; existing names cannot be rebound
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getHttpExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      String string0 = htmlEmail0.embed((DataSource) uRLDataSource0, "7jhXr-v*H@gq", "7jhXr-v*H@gq");
      assertEquals("7jhXr-v*H@gq", string0);
      assertNotNull(string0);
      
      String string1 = htmlEmail0.embed((DataSource) uRLDataSource0, "7jhXr-v*H@gq");
      assertEquals("7jhXr-v*H@gq", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("\" es not exist", "\" es not exist");
      file0.setReadable(false);
      try { 
        htmlEmail0.embed(file0, "\" es not exist");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file C:\\Users\\sdell\\AppData\\Local\\Temp\\\" es not exist0\" es not exist isn't readable
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("Z$+y", "GpI0(lW/DUlF");
      MockFile.createTempFile("Z$+y", "GpI0(lW/DUlF", (File) mockFile0);
      try { 
        htmlEmail0.embed((File) mockFile0, "GpI0(lW/DUlF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file C:\\Users\\sdell\\commons-email\\Z$+y\\GpI0(lW\\DUlF isn't a normal file
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("EELls3Y;\"@Or73");
      try { 
        htmlEmail0.embed((File) mockFile0, "EELls3Y;\"@Or73");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file C:\\Users\\sdell\\commons-email\\EELls3Y;\"@Or73 doesn't exist
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("-5/f");
      File file0 = MockFile.createTempFile("-5/f", "-5/f");
      htmlEmail0.embed(file0, "-5/f");
      try { 
        htmlEmail0.embed((File) mockFile0, "-5/f");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // embedded name 'f' is already bound to file C:\\Users\\sdell\\AppData\\Local\\Temp\\-5\\f0-5\\f; existing names cannot be rebound
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("");
      try { 
        htmlEmail0.embed((File) mockFile0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file name cannot be null or empty
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html");
      String string0 = "C:\\Users\\sdell\\commons-emil\\mail.smtp.socketFactory.class\\file:\\some\\fake\\but\\wellformed\\url\\mail.smp.socketFactory.class0file:\\some\\fake\\but\\wellformed\\url";
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      // Undeclared exception!
      htmlEmail0.embed("http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html", "http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getFileExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      String string0 = htmlEmail0.embed((DataSource) uRLDataSource0, ").5?R@kiqKs#", ").5?R@kiqKs#");
      assertNotNull(string0);
      assertEquals(").5%3FR@kiqKs%23", string0);
      
      String string1 = htmlEmail0.embed(uRL0, ").5?R@kiqKs#");
      assertNotNull(string1);
      assertEquals(").5%3FR@kiqKs%23", string1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.getFileExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL1);
      htmlEmail0.embed((DataSource) uRLDataSource0, "WhJU,iQyV.W5", "WhJU,iQyV.W5");
      try { 
        htmlEmail0.embed(uRL0, "WhJU,iQyV.W5");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // embedded name 'WhJU,iQyV.W5' is already bound to URL file://some/fake/but/wellformed/url; existing names cannot be rebound
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getFileExample();
      try { 
        htmlEmail0.embed(uRL0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // name cannot be null or empty
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.setMsg((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid message supplied
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.setHtmlMsg((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid message supplied
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.setTextMsg((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid message supplied
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("\" does not exist", "\" does not exist");
      htmlEmail0.embed(file0, "\" does not exist");
      htmlEmail0.setMsg("%22%20does%20not%20exist");
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileDataSource fileDataSource0 = new FileDataSource("Tig6*?");
      htmlEmail0.embed((DataSource) fileDataSource0, "Tig6*?", "Tig6*?");
      // Undeclared exception!
      try { 
        htmlEmail0.embed("http:/ewww.UmFakeButWellFredURLgorgtextb3pwt/html", "Tig6*?");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.activation.FileDataSource cannot be cast to javax.activation.URLDataSource
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("\" does not exist", "\" does not exist");
      String string0 = htmlEmail0.embed(file0, "\" does not exist");
      assertNotNull(string0);
      assertEquals("%22%20does%20not%20exist", string0);
      
      String string1 = htmlEmail0.embed(file0, "%22%20does%20not%20exist");
      assertEquals("%22%20does%20not%20exist", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      try { 
        htmlEmail0.embed("file://some/fake/but/wellformed/url", "file://some/fake/but/wellformed/url");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      htmlEmail0.embed((File) null);
  }
}
