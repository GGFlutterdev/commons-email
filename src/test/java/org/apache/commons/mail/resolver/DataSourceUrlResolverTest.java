/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.mail.resolver;

import static org.junit.Assert.*;

import org.apache.commons.mail.DataSourceResolver;
import org.evosuite.runtime.EvoAssertions;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.Assert;
import org.junit.Test;

import javax.activation.DataSource;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * JUnit test case for DataSourceUrlResolver.
 *
 * @since 1.3
 */
public class DataSourceUrlResolverTest extends AbstractDataSourceResolverTest
{

    /**
     * Shows how the DataSourceUrlResolver can resolve files as well but this should
     * be done using a DataSourceFileResolver.
     *
     * @throws Exception the test failed
     */
    @Test
    public void testResolvingFilesLenient() throws Exception
    {
        final DataSourceResolver dataSourceResolver = new DataSourceUrlResolver(new File("./src/test/resources").toURI().toURL(), true);
        assertEquals(IMG_SIZE, toByteArray(dataSourceResolver.resolve("images/asf_logo_wide.gif")).length);
        assertEquals(IMG_SIZE, toByteArray(dataSourceResolver.resolve("./images/asf_logo_wide.gif")).length);
        assertNull(dataSourceResolver.resolve("./images/does-not-exist.gif"));
        assertNull(dataSourceResolver.resolve("/images/asf_logo_wide.gif"));
    }

    /**
     * Tests resolving resources over HTTP.
     *
     * @throws Exception the test failed
     */
    @Test
    public void testResolvingHttpLenient() throws Exception
    {
        final DataSourceResolver dataSourceResolver = new DataSourceUrlResolver(new URL("https://www.apache.org"), true);
        assertTrue(toByteArray(dataSourceResolver.resolve("https://www.apache.org/images/feather-small.gif")).length > 1);
        assertTrue(toByteArray(dataSourceResolver.resolve("images/feather-small.gif")).length > 1);
        assertTrue(toByteArray(dataSourceResolver.resolve("./images/feather-small.gif")).length > 1);
        assertTrue(toByteArray(dataSourceResolver.resolve("/images/feather-small.gif")).length > 1);
    }

    /**
     * Tests resolving resources over HTTP.
     *
     * @throws Exception the test failed
     */
    @Test
    public void testResolvingHttpLenientHost() throws Exception
    {
        final DataSourceResolver dataSourceResolver = new DataSourceUrlResolver(new URL("http://does.not.exist"), true);
        assertNull(toByteArray(dataSourceResolver.resolve("/images/does-not-exist.gif")));
    }

    /**
     * Tests resolving resources over HTTP.
     *
     * @throws Exception the test failed
     */
    @Test(expected = IOException.class)
    public void testResolvingHttpNonLenient() throws Exception
    {
        final DataSourceResolver dataSourceResolver = new DataSourceUrlResolver(new URL("http://does.not.exist"), false);
        assertNotNull(dataSourceResolver.resolve("images/asf_logo_wide.gif"));

        dataSourceResolver.resolve("images/does-not-exist.gif");
    }



    //Test Generated by EvoSuite
    @Test
    public void test00() throws Throwable {
        DataSourceUrlResolver var3 = new DataSourceUrlResolver(new URL("https://www.apache.org"), false);
        DataSource var4 = var3.resolve("images/feather-small.gif", true);
        Assert.assertNotNull(var4);
    }


    @Test
    public void test01() throws Throwable {
        URL var1=new URL("https://www.apache.org");
        DataSourceUrlResolver var3 = new DataSourceUrlResolver(var1, false);
        DataSource var4 = var3.resolve("images/feather-small.gif");
        Assert.assertNotNull(var4);
    }

    @Test
    public void test02() throws Throwable {
        DataSourceUrlResolver var1 = new DataSourceUrlResolver((URL)null);
        URL var2 = var1.getBaseUrl();
        Assert.assertNull(var2);
    }

    @Test
    public void test06() throws Throwable {
        URL var1 = MockURL.getHttpExample();
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1, false);
        URL var3 = var2.createUrl("\u007f_6b|J2kOOn@`");
        Assert.assertEquals("http://www.someFakeButWellFormedURL.org/\u007f_6b|J2kOOn@`", var3.toExternalForm());
    }

    @Test
    public void test07() throws Throwable {
        DataSourceUrlResolver var1 = new DataSourceUrlResolver((URL)null);

        try {
            var1.resolve("?x8Uv", false);
            Assert.fail("Expecting exception: MalformedURLException");
        } catch (MalformedURLException var3) {
            EvoAssertions.verifyException("java.net.URL", var3);
        }

    }


    @Test
    public void test08() throws Throwable {
        URL var1 = new URL("http://does.not.exist");
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1);
        Assert.assertNull(var2.resolve("/images/does-not-exist.gif", true));

    }

    @Test
    public void test09() throws Throwable {
        URL var1 = MockURL.getHttpExample();
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1);

        try {
            var2.resolve("", false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException var4) {
            EvoAssertions.verifyException("org.apache.commons.mail.resolver.DataSourceUrlResolver", var4);
        }

    }

    @Test
    public void test10() throws Throwable {
        URL var1 = MockURL.getFtpExample();
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1);

        try {
            var2.resolve("ie:/");
            Assert.fail("Expecting exception: MalformedURLException");
        } catch (MalformedURLException var4) {
            EvoAssertions.verifyException("java.net.URL", var4);
        }

    }

    @Test
    public void test11() throws Throwable {
        DataSourceUrlResolver var1 = new DataSourceUrlResolver((URL)null);

        try {
            var1.createUrl("org.apache.commons.mail.resolver.DataSourceUrlResolver");
            Assert.fail("Expecting exception: MalformedURLException");
        } catch (MalformedURLException var3) {
            EvoAssertions.verifyException("java.net.URL", var3);
        }

    }

    @Test(expected = IOException.class)
    public void test12() throws Throwable {
        URL var1 =new URL("https://www.apache.org");
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1, false);
        var2.resolve("*#u\u007fl}O~C7+Qmm^#4;v", false);
        Assert.fail("Expecting exception: IOException");
    }

    @Test
    public void test13() throws Throwable {
        URL var1 = MockURL.getFtpExample();
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1);
        DataSource var3 = var2.resolve("cid:", true);
        Assert.assertNull(var3);
    }

    @Test(
            expected = IOException.class)
    public void test14() throws Throwable {
        URL var1 =new URL("https://www.apache.org");
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1);
        var2.resolve("*#u\u007fl}O~C7+Qmm^#4;v");
        Assert.fail("Expecting exception: IOException");


    }

    @Test
    public void test15() throws Throwable {
        URL var1 =new URL("http://does.not.exist");
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1);
        Assert.assertNotNull(var2.resolve("file:/"));
    }

    @Test
    public void test16() throws Throwable {
        URL var1 = MockURL.getFileExample();
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1, true);

        try {
            var2.resolve("");
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException var4) {
            EvoAssertions.verifyException("org.apache.commons.mail.resolver.DataSourceUrlResolver", var4);
        }

    }

    @Test
    public void test17() throws Throwable {
        DataSourceUrlResolver var1 = new DataSourceUrlResolver((URL)null);
        DataSource var2 = var1.resolve("KJ@1\"T{", true);
        Assert.assertNull(var2);
    }

    @Test
    public void test18() throws Throwable {
        URL var1 = MockURL.getFileExample();
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1);
        DataSource var3 = var2.resolve("cid:");
        Assert.assertNull(var3);
    }

    @Test
    public void test19() throws Throwable {
        URL var1 = MockURL.getFtpExample();
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1);

        try {
            var2.createUrl((String)null);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException var4) {
            EvoAssertions.verifyException("org.apache.commons.mail.resolver.DataSourceUrlResolver", var4);
        }

    }

    @Test
    public void test20() {
        URL var1 = MockURL.getHttpExample();
        DataSourceUrlResolver var2 = new DataSourceUrlResolver(var1, false);
        URL var3 = var2.getBaseUrl();
        Assert.assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", var3.toString());
    }


}
